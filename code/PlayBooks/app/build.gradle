plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

android {
    namespace 'com.singularitycoder.playbooks'
    compileSdk 34

    defaultConfig {
        applicationId "com.singularitycoder.playbooks"
        minSdk 31
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        /**
         * arm64-v8a is not an OS or firmware. Its ABI (Application Binary Interface).
         * It describes CPU architecture and calling conventions used by native code in Android Apps.
         * When u build an Android app that includes native libs like .so files, u compile them to specific ABIs.
         *
         * In this case arm64-v8a
         * arm: ARM processors
         * 64: 64-bit architecture
         * v8a: ARMv8-A architecture
         *
         * You can remove all other ABIs (armeabi-v7a, x86, etc.) since ur target devices are all 64 bit since:
         * 64-bit, ARM-based, Running Android 12+. This can save up to 5 MB. For efficient delivery, use AAB.
         * */
        ndk {
            abiFilters "arm64-v8a"
        }
    }

    buildTypes {
        release {
            /*
            * minifyEnabled & shrinkResources
            * https://developer.android.com/build/shrink-code
            *
            * Remove unused resources like drawables, layouts, and strings.
            * Check proguard-rules.pro file in app module to tell R8 not to shrink particular dependencies.
            *
            * When using code shrinkers like ProGuard or R8,
            * they can remove generic type information if not properly configured.
            * A lot of its code was being removed due to reflection, annotations etc.
            *
            * DEBUGGING R8 ISSUES:
            *
            * Test it on release builds - ./gradlew assembleRelease
            *
            * Enable R8 full tracing in gradle.properties:
            * android.enableR8.fullMode=true
            *
            * This gives a slimmer, more accurate view of what will be bundled in release mode.
            * ./gradlew app:dependencies --configuration releaseRuntimeClasspath
            *
            * Check whats available in dependencies
            * ./gradlew app:dependencies
            *
            * ./gradlew clean
            * ./gradlew assembleRelease
            * ./gradlew installRelease
            * */

            // Enable code shrinking (R8/ProGuard)
            minifyEnabled true

            // Enable resource shrinking
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
}

dependencies {

    // View Stuff
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.activity
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.fragment.ktx
//    implementation libs.shimmer
    implementation libs.androidx.recyclerview

    // Coil Stuff
    implementation libs.coil
//    implementation libs.coil.gif
//    implementation libs.coil.video

    // Coroutines
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android

    // Room ORM
    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.ktx
//    implementation "androidx.room:room-paging:$room_version"
    kapt libs.androidx.room.compiler

    // Dagger Hilt
    implementation libs.hilt.android
    kapt libs.hilt.compiler

    // Lifecycle
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.service

    // Others
    implementation libs.androidx.datastore.preferences
    implementation libs.androidx.browser
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.work.runtime.ktx
    implementation libs.gson
    implementation libs.itextg // This has security issues https://github.com/itext/itextpdf
//    implementation libs.pdfium.android // PDF previews - https://github.com/barteksc/PdfiumAndroid

    // Test
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core

}